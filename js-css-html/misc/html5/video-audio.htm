<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>video-audio</title>
  <style>
    #canvas {
      margin-top:10px;
      border-style:solid;
      border-width:1px;
      padding:3px;
    }
  </style>
  <script>
    //Global variable to track current file name
    var currentFile = "";

    //display and update progress bar
    function progressBar() {
      var oAudio = document.getElementById('myaudio');
      //get current time in seconds
      var elapsedTime = Math.round(oAudio.currentTime);
      //update the progress bar
      if (canvas.getContext) {
        var ctx = canvas.getContext("2d");
        //clear canvas before painting
        ctx.clearRect(0, 0, canvas.clientWidth, canvas.clientHeight);
        ctx.fillStyle = "rgb(255,0,0)";
        var fWidth = (elapsedTime / oAudio.duration) * (canvas.clientWidth);
        if (fWidth > 0) {
          ctx.fillRect(0, 0, fWidth, canvas.clientHeight);
        }
      }
    }
    //Play and pause function
    function playAudio() {
      try {
        //return objects we need to work with
        var oAudio = document.getElementById('myaudio');
        var btn = document.getElementById('play');
        var audioURL = document.getElementById('audiofile');

        //Skip loading if current file hasn't changed.
        if (audioURL.value !== currentFile) {
          oAudio.src = audioURL.value;
          currentFile = audioURL.value;
        }

        //Tests the paused attribute and set state.
        if (oAudio.paused) {
          oAudio.play();
          btn.textContent = "Pause";
        }
        else {
          oAudio.pause();
          btn.textContent = "Play";
        }
      } catch (e) {
        if (window.console && console.error("Error:" + e));
      }
    }

    //Rewinds the audio file by 30 seconds.
    function rewindAudio() {
      try {
        var oAudio = document.getElementById('myaudio');
        oAudio.currentTime -= 30.0;
      } catch (e) {
        if (window.console && console.error("Error:" + e));
      }
    }

    //Fast forwards the audio file by 30 seconds.
    function forwardAudio() {
      try {
        var oAudio = document.getElementById('myaudio');
        oAudio.currentTime += 30.0;
      } catch (e) {
        if (window.console && console.error("Error:" + e));
      }
    }

    //Restart the audio file to the beginning.

    function restartAudio() {
      try {
        var oAudio = document.getElementById('myaudio');
        oAudio.currentTime = 0;
      } catch (e) {
        if (window.console && console.error("Error:" + e));
      }
    }

    function initEvents() {
      var canvas = document.getElementById('canvas');
      var oAudio = document.getElementById('myaudio');

      //set up event to toggle play button to pause when playing
      oAudio.addEventListener("playing", function () {
        document.getElementById("play").textContent = "Pause";
      }, true);

      //set up event to toggle play button to play when paused
      oAudio.addEventListener("pause", function () {
        document.getElementById("play").textContent = "Play";
      }, true);
      //set up event to update the progress bar
      oAudio.addEventListener("timeupdate", progressBar, true);
      //set up mouse click to control position of audio
      canvas.addEventListener("click", function (e) {
        //this might seem redundant, but this these are needed later - make global to remove these
        var oAudio = document.getElementById('myaudio');
        var canvas = document.getElementById('canvas');
        if (!e) {
          e = window.event;
        } //get the latest windows event if it isn't set
        try {
          //calculate the current time based on position of mouse cursor in canvas box
          oAudio.currentTime = oAudio.duration * (e.offsetX / canvas.clientWidth);
        } catch (err) {
          if (window.console && console.error("Error:" + err));
        }
      }, true);
    }
    //this event gets fired when a page has loaded
    window.addEventListener("DOMContentLoaded", initEvents, false);
  </script>
</head>
<body>
  <h1>HTML5 audio player with progress bar</h1>
  <p>
    <input type="text" id="audiofile" size="80" value="demo.mp3" />
  </p>
  <audio id="myaudio">
    HTML5 audio not supported
  </audio>
  <p>
    <button id="play" onclick="playAudio();" disabled>
      Play
    </button>
    <button id="rewind" onclick="rewindAudio();" disabled>
      Rewind
    </button>
    <button id="forward" onclick="forwardAudio();" disabled>
      Fast forward
    </button>
    <button id="restart" onclick="restartAudio();" disabled>
      Restart
    </button>
  </p>
  <p>
    <canvas id="canvas" width="500" height="20">
      canvas not supported
    </canvas>
  </p>
  <script type="text/javascript">
    //Check for support and enable buttons
    if (window.HTMLAudioElement) {
      document.getElementById("play").disabled = false;
      document.getElementById("rewind").disabled = false;
      document.getElementById("forward").disabled = false;
      document.getElementById("restart").disabled = false;
    }

    // audio/video 事件列表
    var events = [
      'loadstart', 'progress', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'play', 'pause',
      'loadedmetadata', 'loadeddata', 'waiting', 'playing', 'canplay', 'canplaythrough', 'seeking',
      'seeked', 'timeupdate', 'ended', 'ratechange', 'durationchange', 'volumechange'
    ];

    /**
    HTML5 Video 支持 h264 和 VP9 编码的的视频，支持格式有 mp4 webm ogg ，内存和cpu占用相当低，
    编码器都是专门优化过的（而垃圾 flash ，720p视频能占满6个CPU核心）。
    但不支持外挂字幕，不支持 rmvb 格式，不支持 ac3 编码的音频（版权费原因）
    （mkv 是容器格式、其中的音频编码格式大多为 ac3 ，所以这些 mkv 在 Chrome 里播放会没声音）。
    相关：http://bbs.feng.com/read-htm-tid-5635302.html

    Chrome 是基于开源的 Chromium 的，其音视频解码是由 FFmpeg 提供的，可以给修改增加支持更多种类的音视频格式，
    需要找到 Chromium 的源码 third_party\ffmpeg 模块，重新配置和编译 FFmpeg

    */
  </script>
  https://www.zhihu.com/question/27472010
  安卓 rom 的浏览器会劫持 video 标签，替换成同样大小的 native video ，怎么防止？只有 Chrome 浏览器不会
  <div id="log"></div>
  <script src="http://zeptojs.com/zepto.js"></script>
  <script>
    $('#log').html('<video src="./movie.mp4" controls></video>')
  </script>
</body>
</html>
