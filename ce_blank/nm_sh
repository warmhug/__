#!/bin/bash

# 配置文件路径 '/Users/hua/Library/Application Support/Google/Chrome/NativeMessagingHosts/nm_sh.json'

hl_input=""
hl_output='{"message": "OK"}'
logFile="/Users/hua/log.txt"
# noteFile="/Users/hua/inner/__note.txt"
noteFile="/Users/hua/Library/CloudStorage/OneDrive-个人/__note.txt"
clashFile="/Users/hua/.config/clash/ss.yaml"

dealMsg() {
  # echo `which echo` >> $logFile
  # echo $1":arg1" >> $logFile

  hl_input=${hl_input/#*'{'/'{'}
  # hl_input=${hl_input%'"}'}
  # echo $hl_input >> $logFile
  msg_command=$(echo "$hl_input" | /usr/local/bin/yq '.message')
  msg_content=$(echo "$hl_input" | /usr/local/bin/yq '.content')
  echo $msg_command >> $logFile
  # echo "$msg_content" >> $logFile

  # 注意，如果 echo 的内容不被处理、会导致 Error when communicating with the native messaging host.
  # https://stackoverflow.com/a/51551525/2190503
  # echo something not handle

  if [[ "$msg_command" == "setNote" ]]; then
    echo "$msg_content" > $noteFile
  elif [[ "$msg_command" == "getNote" ]]; then
    noteFile_cont=$(cat $noteFile)
    # echo $noteFile_cont >> $logFile
    hl_output1='{"message": "OK", "content": '$noteFile_cont'}'
    echo "$hl_output1" >> $logFile
    hl_output="$hl_output1"
  elif [[ "$msg_command" == "addRule" ]]; then
    if [[ $msg_content =~ ^www\. ]]; then
      msg_content=${msg_content#www.}
    fi
    new_str=DOMAIN-SUFFIX,"${msg_content}",Proxy
    # 豆包+通义千问: 使用 yq 判断 如果rules 里不存在 aaa，则前置插入aaa
    rules_value=$(/usr/local/bin/yq '.rules' $clashFile)
    if [[ "$rules_value" != *$new_str* ]]; then
      echo $new_str >> $logFile
      /usr/local/bin/yq e '.rules |= [ "'"$new_str"'" ] +.' $clashFile -i
      osascript /Users/hua/inner/-/__/ce_blank/nm_ss.scpt
    fi
  elif [[ "$msg_command" == "clash" ]]; then
  # bypassdomains 和 clash rule 哪个优先？
  bypassdomains="127.0.0.1,localhost,gateway.icloud.com,gateway.icloud.com.cn,\
10.0.0.0/8,100.64.0.0/10,127.0.0.0/8,172.16.0.0/12,192.168.0.0/16,*.local,\
timestamp.apple.com,sequoia.apple.com,seed-sequoia.siri.apple.com"
  networksetup -setproxyautodiscovery Wi-Fi off
  networksetup -setwebproxy Wi-Fi 127.0.0.1 7890
  networksetup -setsecurewebproxy Wi-Fi 127.0.0.1 7890
  networksetup -setsocksfirewallproxy Wi-Fi 127.0.0.1 7890
  networksetup -setproxybypassdomains Wi-Fi "$bypassdomains"
  # networksetup -setproxybypassdomains Wi-Fi *.local 169.254/16 baidu.com
  networksetup -setwebproxystate Wi-Fi on
  networksetup -setsecurewebproxystate Wi-Fi on
  networksetup -setsocksfirewallproxystate Wi-Fi on
  elif [[ "$msg_command" == "temu" ]]; then
  networksetup -setproxyautodiscovery Wi-Fi on
  networksetup -setwebproxystate Wi-Fi off
  networksetup -setsecurewebproxystate Wi-Fi off
  networksetup -setsocksfirewallproxystate Wi-Fi off
  elif [[ "$msg_command" == "whistle" ]]; then
  # w2 proxy
  # sleep 5
  networksetup -setproxyautodiscovery Wi-Fi off
  networksetup -setwebproxy Wi-Fi 127.0.0.1 8899
  networksetup -setsecurewebproxy Wi-Fi 127.0.0.1 8899
  networksetup -setwebproxystate Wi-Fi on
  networksetup -setsecurewebproxystate Wi-Fi on
  networksetup -setproxybypassdomains Wi-Fi Empty
  elif [[ "$msg_command" == "no" ]]; then
  networksetup -setproxyautodiscovery Wi-Fi off
  networksetup -setwebproxystate Wi-Fi off
  networksetup -setsecurewebproxystate Wi-Fi off
  networksetup -setsocksfirewallproxystate Wi-Fi off
  elif [[ "$msg_command" == "openMacConfig" ]]; then
  open "x-apple.systempreferences:com.apple.Network-Settings.extension?Proxies"
  fi
}

# 来自 https://stackoverflow.com/a/24777120/2190503
# Loop forever, to deal with chrome.runtime.connectNative
while IFS= read -r -n1 c; do
    # Read the first message
    # Assuming that the message ALWAYS ends with a },
    # with no }s in the string. Adopt this piece of code if needed.
    hl_input="$hl_input$c"
    if [ "$c" != '}' ] ; then
        continue
    fi

    # dealMsg aa
    dealMsg

    # Calculate the byte size of the string.
    # NOTE: This assumes that byte length is identical to the string length!
    # Do not use multibyte (unicode) characters, escape them instead, e.g.
    # message='"Some unicode character:\u1234"'
    messagelen=${#hl_output}

    # Convert to an integer in native byte order.
    # If you see an error message in Chrome's stdout with
    # "Native Messaging host tried sending a message that is ... bytes long.",
    # then just swap the order, i.e. messagelen1 <-> messagelen4 and
    # messagelen2 <-> messagelen3
    messagelen1=$(( ($messagelen      ) & 0xFF ))
    messagelen2=$(( ($messagelen >>  8) & 0xFF ))
    messagelen3=$(( ($messagelen >> 16) & 0xFF ))
    messagelen4=$(( ($messagelen >> 24) & 0xFF ))

    # Print the message byte length followed by the actual message.
    printf "$(printf '\\x%x\\x%x\\x%x\\x%x' \
        $messagelen1 $messagelen2 $messagelen3 $messagelen4)%s" "$hl_output"

done
